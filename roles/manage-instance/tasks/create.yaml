---
- name: Check if instance exist
  os_server_facts:
    cloud: "{{ os_project }}"
    server: "{{ instance_name }}"

- name: Create volume for docker
  os_volume:
     state: present
     cloud: "{{ os_project }}"
     size: "{{ docker_lvm_size }}"
     display_name: "{{ instance_name }}-docker"
  register: docker_volume

- debug: var=docker_volume
- name: Create static port allocations if an instance does not exist
  os_port:
     state: present
     cloud: "{{ os_project }}"
     name: "{{ instance_name }}"
     network: "{{ network_name }}"
     security_groups:
     -  "{{ security_grp_name }}"
  when: 
  - fixed_ip is not defined
  - openstack_servers|length == 0

- name: Create static port allocations with fixed_ip if an instance does not exist
  os_port:
     state: present
     cloud: "{{ os_project }}"
     name: "{{ instance_name }}"
     network: "{{ network_name }}"
     security_groups:
     -  "{{ security_grp_name }}"
     fixed_ips:
     - ip_address: "{{ fixed_ip }}"
  when: 
  - fixed_ip is defined
  - openstack_servers|length == 0
     
- name: Create OpenShift an instance if it does not exist(DISK)
  os_server:
     state: present
     cloud: "{{ os_project }}"
     name: "{{ instance_name }}"
     image: "{{ instance_image }}"
     key_name: "{{ user_name }}"
     flavor: "{{ instance_flavor }}"
     boot_from_volume: true
     volume_size: 50
     security_groups:
     -  "{{ security_grp_name }}"
     wait: yes
     timeout: 300
     nics:
       - port-name: "{{ instance_name }}"
     auto_ip: no
     terminate_volume: yes
     volumes:
     - "{{ instance_name }}-docker"
#     meta:
#       hostname: "{{ instance_name }}.{{ dns_domain }}"
#     userdata: |
#       hostname: "{{ instance_name }}.{{ dns_domain }}"
#       fqdn: "{{ instance_name }}.{{ dns_domain }}"
  register: new_server
  when: 
  - openstack_servers|length == 0
  - use_ssd is not defined or not use_ssd|bool

- name: Create OpenShift an instance if it does not exist (SSD)
  os_server:
     state: present
     cloud: "{{ os_project }}"
     name: "{{ instance_name }}"
     image: "{{ instance_image }}"
     key_name: "{{ user_name }}"
     flavor: "{{ instance_flavor }}"
     security_groups:
     -  "{{ security_grp_name }}"
     wait: yes
     timeout: 300
     nics:
       - port-name: "{{ instance_name }}"
     auto_ip: no
     volumes:
     - "{{ instance_name }}-docker"
     scheduler_hints:
       group: "{{ server_group.id }}"
#     meta:
#       hostname: "{{ instance_name }}.{{ dns_domain }}"
#     userdata: |
#       hostname: "{{ instance_name }}.{{ dns_domain }}"
#       fqdn: "{{ instance_name }}.{{ dns_domain }}"
  register: new_server
  when: 
  - openstack_servers|length == 0
  - use_ssd is defined and use_ssd|bool


#- name: Attach docker storage for a server instance
#  os_server_volume:
#     state: present
#     cloud: "{{ os_project }}"
#     server: "{{ instance_name }}"
#     volume: "{{ instance_name }}-docker"
#     device: /dev/vdb
#  when: 
#  - openstack_servers is defined
#  - openstack_servers|length == 0

- name: Add floating ip for node
  os_floating_ip:
     cloud: "{{ os_project }}"
     state: present
     reuse: yes
     server: "{{ instance_name }}"
     network: "{{ external_network_name }}"
     wait: true
     timeout: 180
  when: 
  - openstack_servers is defined
  - openstack_servers|length == 0

- name: Gather instance information
  os_server_facts:
    cloud: "{{ os_project }}"
    server: "{{ instance_name }}"
  when: 
  - openstack_servers is defined
  - openstack_servers|length == 0

- import_tasks: ./add_hosts.yaml

#- debug: "msg={{groups['masters']}}"
